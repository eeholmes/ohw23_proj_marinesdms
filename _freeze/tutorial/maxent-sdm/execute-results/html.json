{
  "hash": "8177255c7f4daf5d3dc734854042ff84",
  "result": {
    "markdown": "---\ntitle: \"Marine Species Distribution Models\"\nsubtitle: \"Maxent example\"\ndate: 2023-08-07\noutput: html_document\n---\n\n\nThis example steps through the process of presence-only modeling using the maxnet package. The example is based on the notes by Ben Tupper (Biglow Lab, Maine) https://github.com/BigelowLab/maxnet/wiki/stars\n\n### Workflow\n\n1. Define the area of interest\n2. Obtain sea turtle occurrences for the NE coast of Africa\n3. Use the sdmpredictors package to assemble predictor variable data\n4.  Collect background points within the region occupied by the presence points using sf package\n5. Model and predict using the maxnet package\n\n### Load necessary packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages({\n  library(maxnet)\n  library(dplyr)\n  library(maxnet)\n  library(sf)\n  library(stars)\n  library(geodata)\n  library(dismo)\n  library(lubridate)\n  library(sdmpredictors)\n})\n```\n:::\n\n\n## Step 1: Define the region of interest\n\nWe are looking at the western Arabian Sea, Persian Gulf, Gulf of Oman, Gulf of Aden and Red Sea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlats <- c(-0.125, 32.125); lons <- c(41.875, 70.125)\n# raster extent is defined by west lon, east lon, south lat, north lat\next <- raster::extent(lons[1], lons[2], lats[1], lats[2])\nextent_polygon <- as(ext, \"SpatialPolygons\") %>% st_as_sf()\n# we need to assign a coordinate system; 4326 is the default for maps in sf\nsf::st_crs(extent_polygon)<-4326\n```\n:::\n\n\nGet a polygon of the world.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rnaturalearthdata'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:rnaturalearth':\n\n    countries110\n```\n:::\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n```\n:::\n\n\nMake a map of our region with the polygon of interest. [reference](https://r-spatial.org/r/2018/10/25/ggplot2-sf.html)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(sf)\nggplot(data = world) +\n    geom_sf() + \n  geom_sf(data = extent_polygon, color = \"red\", fill=NA)\n```\n\n::: {.cell-output-display}\n![](maxent-sdm_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Step 2: Load the occurrence data\n\nThis was queried using the robis package.\n\n```\nspp <- c(\"Chelonia mydas\", \"Caretta caretta\", \"Eretmochelys imbricata\", \"Lepidochelys olivacea\", \"Natator depressus\", \"Dermochelys coriacea\")\nwkt_geometry <- extent_polygon$geometry %>% st_as_text()\ndf <- occurrence(spp, startdate = as.Date(\"2000-01-01\"), geometry = wkt_geometry)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspp <- \"Chelonia mydas\"\nocc <- read.csv(\"/home/jovyan/R/ohw23_proj_marinesdms/data/raw-bio/io-sea-turtles.csv\")\nocc <- occ %>% subset(scientificName == spp)\n```\n:::\n\n\nLook at the column names\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats 1.0.0     ✔ stringr 1.5.0\n✔ purrr   1.0.1     ✔ tibble  3.1.8\n✔ readr   2.1.4     ✔ tidyr   1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::extract() masks raster::extract(), terra::extract()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ raster::select() masks dplyr::select()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncolnames(occ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"occurrenceID\"                  \"scientificName\"               \n [3] \"dateIdentified\"                \"eventDate\"                    \n [5] \"decimalLatitude\"               \"decimalLongitude\"             \n [7] \"coordinateUncertaintyInMeters\" \"individualCount\"              \n [9] \"lifeStage\"                     \"sex\"                          \n[11] \"bathymetry\"                    \"shoredistance\"                \n[13] \"sst\"                           \"sss\"                          \n```\n:::\n:::\n\n\nMake sure the turtle was at sea.\n\n::: {.cell}\n\n```{.r .cell-code}\nocc <- occ %>% subset(bathymetry > 0 & \n                        shoredistance > 0 & \n                        coordinateUncertaintyInMeters < 200)\ndim(occ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7060   14\n```\n:::\n:::\n\n\nChange the occurrence data into an sf object with a coordinate system. Add a date column with YYYY-MM-DD format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocc$date <- as.Date(occ$eventDate)\nocc.sf <- sf::st_as_sf(occ, coords = c(\"decimalLongitude\", \"decimalLatitude\"), crs = 4326)\n```\n:::\n\n\nPlot the occurrence data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(\"ggspatial\")\nlibrary(\"sf\")\ntheme_set(theme_bw())\nworld <- st_make_valid(world)\nworld_points <- st_centroid(world)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_centroid.sf(world): st_centroid assumes attributes are constant\nover geometries of x\n```\n:::\n\n```{.r .cell-code}\nworld_points <- cbind(world, st_coordinates(st_centroid(world$geometry)))\n\n\nplt <- ggplot(data = world) +\n    geom_sf(fill= \"antiquewhite\") +\n    geom_point(data = occ, aes(x=decimalLongitude, y=decimalLatitude), color = \"red\", size=0.1) +\n    annotation_scale(location = \"bl\", width_hint = 0.5) +\n    annotation_north_arrow(location = \"bl\", which_north = \"true\", \n        pad_x = unit(0.15, \"in\"), pad_y = unit(0.25, \"in\"),\n        style = north_arrow_fancy_orienteering) +\n    coord_sf(xlim = lons, ylim = lats) +\n    theme(panel.grid.major = element_line(color = gray(.5), linetype = \"dashed\", size = 0.5), panel.background = element_rect(fill = \"aliceblue\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n```\n:::\n\n```{.r .cell-code}\nsf_use_s2(FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSpherical geometry (s2) switched off\n```\n:::\n\n```{.r .cell-code}\nplt + geom_text(data = world_points, aes(x=X, y=Y, label=name),\n          color = \"darkblue\", size=2, check_overlap = TRUE) +\n  xlab(\"longitude\") + ylab(\"latitude\") + \n  ggtitle(spp, subtitle = \"occurences since 2000\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale on map varies by more than 10%, scale bar may be inaccurate\n```\n:::\n\n::: {.cell-output-display}\n![](maxent-sdm_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Use the sdmpredictors package to assemble predictor variable data\n\n## Collect background points within the region occupied by the presence points using sf package\n\n## Model and predict using the maxnet package\n\n",
    "supporting": [
      "maxent-sdm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}